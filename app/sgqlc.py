import re

from fastapi import HTTPException

from sgqlc.operation import Operation
from app.sgqlc_schema import Query

BAD_REQUEST = 400
UNAUTHORIZED = 401
NOT_FOUND = 404
METHOD_NOT_ALLOWED = 405
INTERNAL_SERVER_ERROR = 500


class SimpleGraphQLClient:
    def add_count_field(self, item, query):
        # Add default count field to query
        count_field = f"total: _{item.node}_count"
        if item.filter != {}:
            # Manually modify and add count filed into graphql query
            filter_argument = re.sub(
                '\'([_a-z]+)\'', r'\1', re.sub('\{([^{].*[^}])\}', r'\1', f"{item.filter}"))
            count_field = re.sub(
                '\'', '\"', f"total: _{item.node}_count(" + filter_argument + ")")
        return query + count_field

    def convert_query(self, item, query):
        # Convert camel case to snake case
        snake_case_query = re.sub(
            '_[A-Z]', lambda x:  x.group(0).lower(), re.sub('([a-z])([A-Z])', r'\1_\2', str(query)))
        # Only pagination graphql will need to add count field
        if type(item.search) == dict:
            snake_case_query = self.add_count_field(item, snake_case_query)
        return "{" + snake_case_query + "}"

    def generate_query(self, item):
        query = Operation(Query)
        if item.node == "experiment":
            if "submitter_id" in item.filter:
                experiment_query = self.convert_query(
                    item,
                    query.experiment(
                        first=item.limit,
                        offset=(item.page-1)*item.limit,
                        submitter_id=item.filter["submitter_id"]
                    )
                )
            else:
                experiment_query = self.convert_query(
                    item,
                    query.experiment(
                        first=item.limit,
                        offset=(item.page-1)*item.limit,
                    )
                )
            return experiment_query
        elif item.node == "dataset_description":
            if "submitter_id" in item.filter:
                dataset_description_query = self.convert_query(
                    item,
                    query.datasetDescription(
                        first=item.limit,
                        offset=(item.page-1)*item.limit,
                        submitter_id=item.filter["submitter_id"]
                    )
                )
            else:
                dataset_description_query = self.convert_query(
                    item,
                    query.datasetDescription(
                        first=item.limit,
                        offset=(item.page-1)*item.limit,
                    )
                )
            return dataset_description_query
        elif item.node == "manifest":
            if "additional_types" in item.filter:
                manifest_query = self.convert_query(
                    item,
                    query.manifest(
                        first=item.limit,
                        offset=(item.page-1)*item.limit,
                        quick_search=item.search,
                        additional_types=item.filter["additional_types"]
                    )
                )
            else:
                manifest_query = self.convert_query(
                    item,
                    query.manifest(
                        first=item.limit,
                        offset=(item.page-1)*item.limit,
                        quick_search=item.search))
            return manifest_query
        else:
            raise HTTPException(status_code=NOT_FOUND,
                                detail="GraphQL query cannot be generated by sgqlc")
